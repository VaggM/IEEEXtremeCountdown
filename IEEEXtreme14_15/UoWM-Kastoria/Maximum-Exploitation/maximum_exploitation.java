//
//   CSAcademy Problem - Maximum Exploitation
//   From: IEEEXtreme 15.0
//   Solved By: Dimitrios and Petros Papakonstantinou
//   Submission Score: 100/100 (1456ms - 46.9MB)
//

import java.util.Scanner;

public class Main {
  public static void main(String[] args) {
    Scanner scanner = new Scanner(System.in);

    // Read the number of rows, columns, and the dimensions of submatrices (x,
    // y)
    int row = scanner.nextInt();
    int col = scanner.nextInt();
    int x = scanner.nextInt();
    int y = scanner.nextInt();

    // Arrays to store the maximum submatrix sums for each row and each column
    int[] Row = new int[row + 1];
    int[] Col = new int[col + 1];

    // 2D array to store prefix sums for the grid
    int[][] sum = new int[row + 1][col + 1];

    // Loop through each row of the grid
    for (int r = 1; r <= row; ++r) {
      // Update the maximum submatrix sum for the current row using the previous
      // row
      Row[r] = Math.max(Row[r], Row[r - 1]);

      // Loop through each column of the grid
      for (int c = 1; c <= col; ++c) {
        // Update the maximum submatrix sum for the current column using the
        // previous column
        Col[c] = Math.max(Col[c], Col[c - 1]);

        // Read the value for the current cell
        sum[r][c] = scanner.nextInt();

        // Compute the prefix sum for the current cell
        // Formula: current cell's value - top-left diagonal + left + top
        sum[r][c] =
            sum[r][c] - sum[r - 1][c - 1] + sum[r][c - 1] + sum[r - 1][c];

        // Check if we can calculate the sum of a submatrix with dimensions (x,
        // y) ending at (r, c)
        if (r >= x && c >= y) {
          // Calculate the sum for the submatrix of size (x, y)
          int xySum =
              sum[r][c] - sum[r - x][c] - sum[r][c - y] + sum[r - x][c - y];
          // Update the maximum submatrix sum for the current row and column
          Row[r] = Math.max(Row[r], xySum);
          Col[c] = Math.max(Col[c], xySum);
        }

        // Check if we can calculate the sum of a submatrix with dimensions (y,
        // x) ending at (r, c)
        if (r >= y && c >= x) {
          // Calculate the sum for the submatrix of size (y, x)
          int yxSum =
              sum[r][c] - sum[r - y][c] - sum[r][c - x] + sum[r - y][c - x];
          // Update the maximum submatrix sum for the current row and column
          Row[r] = Math.max(Row[r], yxSum);
          Col[c] = Math.max(Col[c], yxSum);
        }
      }
    }

    int ans = 0; // Variable to store the final maximum sum

    // Iterate through the grid again to compute the final result
    for (int r = 1; r <= row; ++r) {
      for (int c = 1; c <= col; ++c) {
        // Check if we can calculate the sum of a submatrix of size (x, y)
        // ending at (r, c)
        if (r >= x && c >= y) {
          int xySum =
              sum[r][c] - sum[r - x][c] - sum[r][c - y] + sum[r - x][c - y];
          // Update the final maximum sum using the row and column max values
          ans = Math.max(ans, xySum + Math.max(Row[r - x], Col[c - y]));
        }

        // Check if we can calculate the sum of a submatrix of size (y, x)
        // ending at (r, c)
        if (r >= y && c >= x) {
          int yxSum =
              sum[r][c] - sum[r - y][c] - sum[r][c - x] + sum[r - y][c - x];
          // Update the final maximum sum using the row and column max values
          ans = Math.max(ans, yxSum + Math.max(Row[r - y], Col[c - x]));
        }
      }
    }

    // Output the final maximum submatrix sum
    System.out.println(ans);

    // Close the scanner
    scanner.close();
  }
}
