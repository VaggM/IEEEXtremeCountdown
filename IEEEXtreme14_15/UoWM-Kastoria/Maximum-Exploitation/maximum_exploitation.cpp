//
//   CSAcademy Problem - Maximum Exploitation
//   From: IEEEXtreme 15.0
//   Solved By: Dimitrios and Petros Papakonstantinou
//   Submission Score: 100/100 (239ms - 4376KB)
//

#include <iostream>
#include <vector>

using namespace std;

int main(void) {
  int row, col, x, y;

  // Read the number of rows, columns, and the dimensions of submatrices (x and
  // y)
  cin >> row >> col >> x >> y;

  // Initialize vectors to store the maximum submatrix sums for each row and
  // column
  vector<int> Row(row + 1, 0), Col(col + 1, 0);

  // Initialize a 2D vector to store prefix sums for the grid
  vector<vector<int>> sum(row + 1, vector<int>(col + 1, 0));

  // Loop through each row of the grid
  for (int r = 1; r <= row; ++r) {
    // Update the max submatrix sum for the current row based on the previous
    // row
    Row[r] = max(Row[r], Row[r - 1]);

    // Loop through each column of the grid
    for (int c = 1; c <= col; ++c) {
      // Update the max submatrix sum for the current column based on the
      // previous column
      Col[c] = max(Col[c], Col[c - 1]);

      // Read the value for the current cell
      cin >> sum[r][c];

      // Calculate the prefix sum for the current cell
      // The prefix sum formula: current cell's value - top-left diagonal + left
      // + top
      sum[r][c] = sum[r][c] - sum[r - 1][c - 1] + sum[r][c - 1] + sum[r - 1][c];

      // If a submatrix of size (x, y) can fit ending at (r, c), calculate its
      // sum
      if (r >= x && c >= y) {
        int xySum =
            sum[r][c] - sum[r - x][c] - sum[r][c - y] + sum[r - x][c - y];
        // Update the maximum submatrix sum for the current row and column
        Row[r] = max(Row[r], xySum);
        Col[c] = max(Col[c], xySum);
      }

      // Similarly, if a submatrix of size (y, x) can fit ending at (r, c),
      // calculate its sum
      if (r >= y && c >= x) {
        int yxSum =
            sum[r][c] - sum[r - y][c] - sum[r][c - x] + sum[r - y][c - x];
        // Update the maximum submatrix sum for the current row and column
        Row[r] = max(Row[r], yxSum);
        Col[c] = max(Col[c], yxSum);
      }
    }
  }

  int ans = 0; // Variable to store the final maximum sum

  // Loop through each cell again to calculate the final answer
  for (int r = 1; r <= row; ++r) {
    for (int c = 1; c <= col; ++c) {
      // If a submatrix of size (x, y) can fit ending at (r, c), calculate its
      // sum and update the result
      if (r >= x && c >= y) {
        int xySum =
            sum[r][c] - sum[r - x][c] - sum[r][c - y] + sum[r - x][c - y];
        // Update the maximum result using row and column max values
        ans = max(ans, xySum + max(Row[r - x], Col[c - y]));
      }

      // If a submatrix of size (y, x) can fit ending at (r, c), calculate its
      // sum and update the result
      if (r >= y && c >= x) {
        int yxSum =
            sum[r][c] - sum[r - y][c] - sum[r][c - x] + sum[r - y][c - x];
        // Update the maximum result using row and column max values
        ans = max(ans, yxSum + max(Row[r - y], Col[c - x]));
      }
    }
  }

  // Output the final result, which is the maximum submatrix sum found
  cout << ans << endl;

  return 0;
}
